

성능 향상을 위한 코딩
1. JavaScript Code
  ** Cpp에서 Q_PROPERTY를 사용해 선언한 속성이 QML로 넘어올 때​ 속성 형식 변환으로 인한 비용 최소화
    - 가장 일치하는 속성 형식을 사용한다. (변환을 최소화)
  ** 속성 값을 탐색하는 비용 // JsCode_ResolvingProperty.qml
    - 중간 변수를 사용한다.
  ** Property Binding 에서 생기는 비용 // JsCode_ResolvingProperty.qml
    - 중간 변수를 사용해 Property Binding을 최소한으로 사용한다.
  ** Sequence 팁
    - 일부를 제외하면 느린 시퀸스 자료형을 보다 빠르게 사용하기 위한 구현방법
      > 참조 시퀸스(시퀀스가 QObject의 Q_PROPERTY인 경우), 복사 시퀸스(시퀀스가 QObject의 Q_INVOKABLE 함수에서 반환되는 경우)
      - 참조 시퀸스의 느린 쓰기 기능을 최소화
        // JsCode_SequinceTip1.qml
      - 특정 시퀸스에 바인딩이 많은 경우, 알람 체계에 의해 시퀸스 호출시마다 바인딩에 영향이 간다.
        // JsCode_SequinceTip2_~.qml
  ** ValueType 팁
    - Sequence 와 동일한 QObject 속성을 가지며, 알람 체계 또한 동일하다.
  ** 기타 JavaScript Object
    - 가능하면 eval()을 사용하지 말 것.
    - Object의 Property를 삭제하지 말 것.

2. Common Interface Elements  (공통 인터페이스 요소)
  ** Text Elements
    [Text.StyledText : 부분 글꼴 변환이 대부분 가능한 HTML 3.2의 기본 Rich Text]
    - 가능한 경우 "Text.StyledText" 대신 "Text.PlainText"을 사용한다.
    - "Text.RichText" 기능은 지양한다.
    - 위 설정을 위해 "Text.AutoText" 기능이 어떻게 동작할지 확인한다.
  ** Images
    - Asynchronous : 대용량 이미지인 경우 Image의 Asynchronous 속성을 true로 하여 UX에 부정적인 영향을 주지 않는다.
    - sourceSize : 보다 작은 공간에 맞춰 Image를 로드하는 속성 값을 지정한다. 값 변경 시 재 로딩.
    - 미리 구현된 이미지 리소스를 사용한다. (런타임 중 이미지 변환 작업을 되도록 수행하지 않도록 한다.)
    - image.smooth : 필요한 경우만 활성화 한다.
    - 같은 공간에 반복적인 드로잉은 피한다. (ex. Rectangle 보다 Item을 우선적으로 사용)
  ** 앵커가 있는 위치 요소(Position Elements With Anchors)
    - Anchor 를 사용 한 x, y, Width, Height 속성 바인딩은 유연성이 크지만 상대적으로 느리다.
      // PositionSetting_1_RelativePos.qml
    - 단 레이아웃이 동적이지 않는다면 x, y, width, height 속성을 정적 값으로 초기화를 하는것이 효과적이다.
      // PositionSetting_2_NotDynamic.qml
    - 부모의 0,0 좌표를 Offset으로 한다면 Anchors는 사용하지 말아야 한다.

3. Visual Effects (시각 효과)
  ** Animation
    - 경우에 따라서는 애니메이션 동작 전에 바인딩을 비활성화 하고 애니매이션이 완료 된 후 활성화 시키는것이 좋다.
    - Animation 실행 중에 JavaScript를 실행하지 않는다. (예를들어 x 속성 애니메이션의 각 프레임에 대해 복잡한 JavaScript 적용하면 안된다.)
  ** Particles (파티클: 입자)
    - "Qt Quick Particles" 모듈 기능은 프로그램을 사용할 대상의 플랫폼(CPU 성능 등)을 고려하여 구현해야한다. 60FPS 가 안나올 경우 고려...
    - 이 시스템을 사용하지 않는다면 비활성화 한다 . "Particle System Performance Guide" 참조

4. Controlling Element Lifetime (요소 수명 제어)​
  ** Lazy Initialization  (느린 초기화)
    > 컴포넌트 로딩과 초기화로 인해 프레임이 날뛰는것을 막기위해 "QML Engine"이 있으나. 그보다 일을 필요할 때 까지 미루는것과 하지 않아도 될 일은 피하는 것이 더 좋은 방법이다.
    > 이를 위한 로더 사용 및 동적 작성이다.

    - Using Loader (로더 사용)
      - Loader의 "active" 속성을 사용하여 필요할 때 까지 초기화를 미룬다.
      - 오버로드 된 버전의 "setSource()" 함수를 사용하여 초기 속성값을 제공 받는다.
      - Loader의 "asynchronous" 속성을 true 로 하면 컴포넌트가 인스턴스화되는 동안의 유동성이 개선 될 수도 있습니다.

  ** Destroy Unused Elements (사용되지 않는 요소 삭제)
    - 개발자는 런타임 중 "Qt.createComponent()" 함수를 사용해 컴포넌트를 동적으로 만든 다음 "createObject()" 를 호출해 인스턴스 화 할 수 있다.
      단 이 오브젝트는 호출 시의 ownership semantics 지정에 따라 개발자가 수동으로 삭제해야 할 수 있다. ( Dynamic QML Object Creation from JavaScript 검색 참조)

5. Rendering (렌더링)
> 렌더링 성능을 저해하는 요소
  ** Clipping
    - 필요할 때만 활성화 시킬 것
    - 활성화 했을 경우 자신뿐만 아니라 자식의 Painting까지 포함하여 직사각형으로 Clip한다.
      이것은 렌더러가 그리는 순서를 정할 수 없게 되며, 최선의 scene graph traversal 을 사용 할 수 없다.

  ** Over-drawing and Invisible Elements
    - 다른 요소에 의해 완전하게 덮여서 보이지않는 요소는 "visible" 속성을 false로 변경하는것이 좋다.
    - 마찬가지로 보이지는 않지만 시작 시 초기화 시간이 (많이) 필요한 요소들은 "visible" 속성을 false 한 상태로 초기화 작업을 진행하여 괜히 Drawing 하는 상황은 피한다.
      (예 : 선택되지 않은 탭의 페이지)

  ** Translucent vs Opaque (반투명 vs 불투명)
    - 일반적으로 Opaque 상태가 더 빠르게 그려진다. (Translucent는 블렌딩이 필요하고 또한 렌더러는 Opaque 컨텐츠의 잠재적인 최적화를 더 잘 처리하기 때문)
    - 이미지에 하나의 반투명 픽셀이 있는 경우 다른 불투명 픽셀을 모두 반투명으로 처리한다. ( "BorderImage" 설정 true 또한 마찬가지다.)

  ** Shaders
    - "ShaderEffect" 타입을 사용하면 "GLSL" 코드를 Qt Quick 앱에 적은 오버헤드를 발생 시키면서 인라인으로 배치할 수 있지만
      실제 프로그램에서 렌더링된 모든 픽셀에 셰이더가 적용 된다는것을 알아야 한다.
      로우엔드 하드웨어 배포시에는 주의할 것.
      - GLSL로 작성된 셰이더는 복잡한 변환과 시각적 효과를 작성할 수 있지만, 신중하게 사용해야 한다.
      - ShaderEffectSource를 사용하면 scene을 그리기 전에 FBO로 미리 렌더링합니다. 이 extra overhead 는 많은 비용이 들 수 있다.

6. Memory Allocation And Collection (메모리 할당 및 수집)
> QML로 작성된 응용 프로그램은 C ++ 힙과 자동 관리 JavaScript 힙의 메모리를 사용한다.
> 애플리케이션 개발자는 성능을 극대화하기 위해 각각의 미묘함을 인식해야 한다.
  ** Tips For QML Application Developers (QML 응용 프로그램 개발자를 위한 팁)
    - Instantiate and initialize components lazily (컴포넌트의 인스턴트 화 및 초기화를 여유롭게 한다.)
    - Destroy unused objects (사용하지 않는 객체는 파괴한다)
    - Don't manually invoke the garbage collector (가비지 수집기를 수동으로 호출하지 않는다)
    - Avoid complex bindings (복잡한 바인딩은 피한다)
    - Avoid defining multiple identical implicit types (똑같은 암시적 타입을 여러번 정의하지 않는다)
    - Reuse existing components (기존 컴포넌트를 재사용한다)
    - Use singleton types instead of pragma library scripts (pragma library script 대신에 싱글톤 타입 사용)
  ** Memory Allocation in a QML Application
    - QML 애플리케이션의 메모리 사용은 C ++ 힙 사용과 JavaScript 힙 사용의 두 부분으로 나눌 수 있다
      - C ++ 힙 :
        > QML 엔진의 고정 및 피할 수 없는 오버헤드(구현 데이터 구조, 컨텍스트 정보 등)
        > "per-component" 컴파일된 데이터 및 타입 정보,
          포함된 "per-type" 속성 메타데이터,
          응용 프로그램에서 로드하는 모듈 및 구성 요소에 따라 "QML 엔진"에 의해 생성된 것
        > 응용 프로그램이 인스턴스화하는 컴포넌트 따라 개체당 C++ 데이터(속성 값 포함)와 요소당 메타 개체 계층

        QML 수입(라이브러리)에 의해 특별히 할당된 모든 데이터.

  ** In-Depth Memory Allocation Considerations


7. 프로파일링 도구를 사용하여 문제확인

## 참조 ##
https://doc.qt.io/qt-5/qtquick-performance.html
- https://ebeenarticle.tistory.com/entry/Qt-QML-Performance-Considerations-And-Suggestions
- https://makersweb.net/qt/23987
